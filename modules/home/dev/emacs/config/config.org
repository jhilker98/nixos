#+title: Doom Emacs
#+property: header-args :noweb yes
#+property: header-args:emacs-lisp :tangle config.el
#+startup: fold


* Modules
#+name: doom-modules
#+begin_src emacs-lisp :tangle init.el :comments no
(doom! :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico           ; the search engine of the future
        ;;+childframe
        +icons)

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode +github +ascii)  ; ���
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       (hydra
        +childframe
        +pretty)
       ;;indent-guides     ; highlighted indent columns
       (ligatures         ; ligatures and symbols to make your code pretty again
        +iosevka)
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults +all)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired             ; making dired pretty [functional]
        +icons
        +ranger
        +casual)
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;(spell +aspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       (lookup              ; navigate your code and its documentation
        +dictionary
        +docsets
        +offline)
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       tree-sitter
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript        ; all(hope(abandon(ye(who(enter(here))))))
        +tree-sitter)
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
         +hugo
         +moderncv
         +pandoc
         +pretty
         +publish
         +roam2
         +sidebar)
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python            ; beautiful is better than ugly
        +lsp
        +pyright)
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       (yaml              ; JSON, but readable
        +lsp)
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

*** Hydra
I like to use popup windows as much as I can, along with making my hydras prettier. In addition, I find hydras easier to work with than transients.
#+begin_src emacs-lisp :tangle modules/ui/hydra/packages.el
(use-package! hydra)
#+end_src


**** UI Tweaks
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :ui hydra +childframe)
  (package! hydra-posframe
    :recipe (:host github :repo "Ladicle/hydra-posframe")))

(when (modulep! :ui hydra +pretty)
  (package! pretty-hydra
    :recipe (:host github :repo "jerrypnz/major-mode-hydra.el" :files ("pretty-hydra.el"))))
#+end_src

#+begin_src emacs-lisp
(after! hydra-posframe
  (hydra-posframe-mode t))
#+end_src

** Web Languages
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang web +lipsum)
  (package! lorem-ipsum))

(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

I also want my tailwind server to work as an add-on.
#+begin_src emacs-lisp
(after! lsp-tailwindcss
  (setq lsp-tailwindcss-add-on-mode t))
#+end_src

* General Initialization
#+begin_src emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com")

(when (modulep! emoji)
	(emojify-download-emoji))
#+end_src

** WSL2-Specific Tweaks
Since my current machine uses WSL2 with Ubuntu, I need to account for a few things here.
*** Browser on Windows
I use firefox as my browser, though I need to configure Emacs to use it.
#+begin_src emacs-lisp
(when (and (eq system-type 'gnu/linux)
           (string-match
            "Linux.*Microsoft.*Linux"
            (shell-command-to-string "uname -a")))
  (setq
   browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
   browse-url-generic-args     '("/c" "start")
   browse-url-browser-function #'browse-url-generic))
#+end_src

*** Copy/Paste text
#+begin_src emacs-lisp
(defun copy-selected-text (start end)
  (interactive "r")
  (if (use-region-p)
      (let((text (buffer-substring-no-properties start end)))
        (shell-command (concat "echo '" text "' | clip.exe")))))
#+end_src

* UI Changes
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox
      ;; doom-theme 'doom-nord ;; 20242C
      doom-font (font-spec :name "Josevka" :size 18)
      doom-unicode-font (font-spec :name "Josevka")
      doom-variable-pitch-font (font-spec :name "Josevka Book Sans" :size 18))

(set-face-attribute 'default nil :background "#1d2021") ;; Gruvbox Dark Hard

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic))

;(after! ielm
;  (set-popup-rule! "*ielm*" :side 'right :size 0.4))
;
;(after! helpful
;  (set-popup-rule! "*helpful\:\* *" :side 'right :size 0.4))

;(setq +popup-defaults
;  (list :side   'right
;;        ;:height 0.16
;        :width  0.5
;        :quit   t
;        :select #'ignore
;        :ttl    5))
#+end_src

** Hydra
I like to use popup-windows as much as I can, along with making my hydras prettier.
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :ui hydra +childframe)
  (package! hydra-posframe
    :recipe (:host github :repo "Ladicle/hydra-posframe")))

(when (modulep! :ui hydra +pretty)
  (package! pretty-hydra
    :recipe (:host github :repo "jerrypnz/major-mode-hydra.el" :files ("pretty-hydra.el"))))
#+end_src

#+begin_src emacs-lisp
(after! hydra-posframe
  (hydra-posframe-mode t))
#+end_src


* Org-Mode
** Initial Setup
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org")

(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANC(c)")
                            (sequence "OPEN(o)" "MERGED(m)" "CLOSED(C)")
                            (type "PROJECT(p)" "HOME(H)" "JOB(J)"))
        org-todo-keyword-faces '(("TODO" . (:foreground "#fb4934" :underline t))
                                 ("NEXT" . (:foreground "#fe8019"))
                                 ("OPEN" . (:foreground "#fb4934" :underline t))
                                 ("DONE" . (:foreground "#83a598" :strike-through t))
                                 ("CANC" . (:foreground "#83a598" :strike-through t))
                                 ("PROJECT" . (:foreground "#d3869b" :weight bold :slant italic)))
        org-agenda-files '("gtd/inbox.org" "gtd/orgzly.org" "gtd/todo.org" "gtd/gcal.org" "gtd/projects.org")

        org-agenda-start-day nil ;; today
        org-ellipsis "▾")
  (add-to-list 'org-modules 'org-habit t))

#+end_src

** UI Changes
#+begin_src emacs-lisp :tangle packages.el
(package! org-reveal)
#+end_src


#+begin_src emacs-lisp
(defun jh/org-ui-hook ()
  (variable-pitch-mode 1)
  ;(setq display-line-numbers-type 'nil)
  (setq display-line-numbers nil)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-document-title nil :font (font-spec :family "Josevka Book Slab" :size 22) :weight 'bold))

(add-hook! 'org-mode-hook #'jh/org-ui-hook)

#+end_src

** Tasks, Agendas, and Project Planning
I like to use org-mode to handle projects, tasks, and my calendar.
#+begin_src emacs-lisp :tangle packages.el
(package! org-super-agenda)
(package! doct)
(package! org-ql)
(package! org-recur)
(package! org-trello)
(package! org-sidebar
  :recipe (:host github :repo "alphapapa/org-sidebar"))
#+end_src

#+begin_src emacs-lisp
(after! org-agenda
  (org-super-agenda-mode))
(after! org-recur
  (add-hook! 'org-mode-hook #'org-recur-mode)
  (add-hook! 'org-agenda-mode-hook #'org-recur-agenda-mode))

(use-package! org-habit
  :after org
  :config
  (setq org-habit-following-days 7
        org-habit-preceding-days 35
        org-habit-show-habits t))
#+end_src

*** Capture Templates
#+begin_src emacs-lisp
(after! doct
  (setq org-capture-templates
            (doct '(("Inbox" :keys "i"
                     :file "~/Dropbox/org/gtd/inbox.org"
                     :template "* TODO %^{TODO Item}"
                     :immediate-finish t)))))
#+end_src

**** Recipes
#+begin_src emacs-lisp
(after! (:and doct org-chef)
  (setq org-capture-templates
        (doct-add-to org-capture-templates
                     '(("Recipe" :keys "r" :file "~/Dropbox/org/recipes.org" :headline "Inbox" :type entry
                        :children (("Remote Recipe" :keys "r" :template "%(org-chef-get-recipe-from-url)")
                                   ("Manual Recipe" :keys "m" :template
                                    ("* %^{Recipe title: }"
                                    ":PROPERTIES:"
                                    ":source-url:"
                                    ":servings:"
                                    ":prep-time:"
                                    ":cook-time:"
                                    ":ready-in:"
                                    ":END:"
                                    "** Ingredients"
                                    "%?"
                                    "** Directions"))))))))
#+end_src

*** Agenda Views

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
  '(
    <<jh/oa-dashboard>>
        ))
      #+end_src

**** Dashboard View
#+name: jh/oa-dashboard
#+begin_src emacs-lisp :tangle no
("d" "Dashboard"
     ((agenda "" ((org-agenda-span 'day)
                  (org-agenda-overriding-header "Today")
                  (org-agenda-show-inherited-tags nil)
                  (org-agenda-format-date "%a, %d %b")
                  (org-agenda-current-time-string "ᐊ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ Now")
                  (org-agenda-time-grid '((today require-timed remove-match)()() "" "┈┈┈┈┈┈┈┈┈┈┈┈┈┈"))
                  (org-agenda-use-time-grid t)
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-deadline-warning-days 14)))

      ))

#+end_src
*** Sidebars
I like to use org-sidebar to configure quick views at a glance.
#+begin_src emacs-lisp
#+end_src

*** Project Planning
#+begin_src emacs-lisp :tangle "packages.el"
(package! om-dash
  :recipe (:host github :repo "gavv/om-dash" :files ("om-dash.el")))
#+end_src

#+begin_src emacs-lisp
(use-package! om-dash)
(add-hook! 'org-mode-hook #'om-dash-mode)
#+end_src

** Literate Programming
One of the neatest things about org-mode is the ability to do "literate programming", where your documentation and your source code live in the same file. While I don't necessarily think it's the most useful application of programming, for something like a config file or teaching someone to code, it's a great idea. First off, I want to load particular languages into org-babel.
#+begin_src emacs-lisp

#+end_src

** Note-taking with Org Roam & Denote
I love using org-roam for maintaining notes and notebooks. However, I also like being able to visualize how my notes interact, and being able to quickly create particular templates.
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang org +roam2)
  (package! vulpea)
  (package! org-roam-ui))

(package! denote)
#+end_src

*** Initial Setup
#+begin_src emacs-lisp
(after! org-roam
  <<roamDisplay>>
  (setq org-roam-directory "~/Dropbox/roam/"
        org-roam-db-location "~/.org-roam.db"
        org-roam-db-autosync-mode t
        org-roam-completion-everywhere t
        org-roam-node-display-template (concat (propertize "${namespace:15}" 'face '(:foreground "#d3869b" :weight bold)) "${topics:35} ${title:*}" (propertize "${tags:50}" 'face 'org-tag))))


(after! vulpea
  (add-hook! 'org-roam-db-autosync-mode #'vulpea-db-autosync-enable))

(after! deft
  (setq deft-directory "~/Dropbox/org/.deft"))
#+end_src

**** Prettier Display Templates
I like to display a few custom variables in my org-roam-display-template: namely the "namespace" (aka the core topic of the note, such as something for my site, or something for a worldbuilding project, etc), the core topics/categories (such as a campaign I'm playing in, any projects it's related to, etc).
#+name: roamDisplay
#+begin_src emacs-lisp :tangle no
(cl-defmethod org-roam-node-namespace ((node org-roam-node))
  "Return the currently set namespace for the NODE."
  (let ((namespace (cdr (assoc-string "NAMESPACE" (org-roam-node-properties node)))))
    (if (or
         (not namespace)
         (string= namespace (file-name-base (org-roam-node-file node))))
        " Namespace" ; or return the current title, e.g. (org-roam-node-title node)
      (format " %s" namespace))))

(cl-defmethod org-roam-node-topics ((node org-roam-node))
  "Return the currently set namespace for the NODE."
  (let ((topics (cdr (assoc-string "TOPICS" (org-roam-node-properties node)))))
    (if (string= topics (file-name-base (org-roam-node-file node)))
        " (Node Topics)"
      (format "%s" topics))))


#+end_src

*** "Capture Templates"
Because I have so many use cases for Org-roam, Instead of keeping a bunch of capture templates, I'd rather write a function to create a note with the relevant metadata setup rather than having to go in and manually set up metadata in each note. But first, I'd like to set up a variable containing metadata for each topic - things such as the hugo directory, the actual head of the org-file, the path to the org-file, etc. I am currently using hydras from [[https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras][this]] blog post.
#+begin_src emacs-lisp
(defun my/refile (file headline &optional arg)
  (let ((pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile arg nil (list headline file nil pos)))
  (switch-to-buffer (current-buffer)))
#+end_src


*** Extra Features
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

** Long-Form Writing
I like to use a package called =binder.el= to manage longer writing projects. I also want to use handle spelling and grammatical errors here, as well as setting up a bibliography.
#+begin_src emacs-lisp :tangle packages.el
(package! binder)
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq org-cite-global-bibliography '("~/Dropbox/biblio/main.bib")))
#+end_src


*** Blogging with Hugo
#+begin_src emacs-lisp
(after! ox-hugo
  (setq org-hugo-front-matter-format "yaml"
        org-hugo-section "blog"
        org-hugo-paired-shortcodes "cventry mermaid warning"
        org-hugo-auto-set-lastmod t
        org-hugo-suppress-lastmod-period 86400
        org-hugo-special-block-type-properties '(("audio" :raw t)
                                                 ("katex" :raw t)
                                                 ("mark" :trim-pre t :trim-post t)
                                                 ("tikzjax" :raw t)
                                                 ("video" :raw t)
                                                 ("mermaid" :raw t)))
  (add-to-list 'org-export-global-macros '(("srcstart" . "@@hugo:<details><summary class=\"font-bold underline\">$1</summary>@@")
                                           ("srcend" . "@@hugo:</details>@@"))))
#+end_src

*** Blogging with Astro and Pandoc
Since I no longer use Hugo, I want to use pandoc to build my blog posts.
#+begin_src emacs-lisp
(after! ox-pandoc
  (setq org-pandoc-options-for-markdown_strict '((standalone . t)))
  (defun org-pandoc-publish-to (format plist filename pub-dir)
  (setq org-pandoc-format format)
  (let ((tempfile
   (org-publish-org-to
    'pandoc filename (concat (make-temp-name ".tmp") ".org") plist pub-dir))
  (outfile (format "%s.%s"
           (concat
            pub-dir
            (file-name-sans-extension (file-name-nondirectory filename)))
           (assoc-default format org-pandoc-extensions))))
    (let ((process
     (org-pandoc-run tempfile outfile format 'org-pandoc-sentinel
             org-pandoc-option-table))
    (local-hook-symbol
     (intern (format "org-pandoc-after-processing-%s-hook" format))))
      (process-put process 'files (list tempfile))
      (process-put process 'output-file filename)
      (process-put process 'local-hook-symbol local-hook-symbol))))

(defun org-pandoc-publish-to-markdown (p f pd)
  (org-pandoc-publish-to 'markdown p f pd)))
#+end_src

**** Astro
#+begin_src emacs-lisp :tangle packages.el
(package! astro-ts-mode
  :recipe ( :host github :repo "Sorixelle/astro-ts-mode"))
#+end_src

#+begin_src emacs-lisp
(after! treesitter
  (setq treesit-language-source-alist
      '((astro "https://github.com/virchau13/tree-sitter-astro")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))))
#+end_src

** Publishing
#+begin_src emacs-lisp :tangle packages.el
(package! esxml)
(package! simple-httpd)
#+end_src

** RPG Campaign Manager
#+begin_src emacs-lisp :tangle packages.el
(package! decide)
#+end_src

** Recipe Tracker
#+begin_src emacs-lisp :tangle packages.el
(package! org-chef)
#+end_src

** Maintaining a CV
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang org +moderncv)
  (package! ox-moderncv
    :recipe (:host gitlab :repo "jhilker98/org-cv")))

#+end_src


* Languages
I first want to set up delta in emacs. Delta is a superior diff tool IMO.
#+begin_src emacs-lisp :tangle packages.el
(package! magit-delta)
#+end_src

#+begin_src emacs-lisp
(after! magit-delta
  (add-hook! 'magit-mode #'magit-delta-mode))
#+end_src

I also use [[https://wakatime.com][Wakatime]] to manage my time spent in development on any given project.
#+begin_src emacs-lisp :tangle packages.el
(package! wakatime-mode)
#+end_src

** Python
#+begin_src emacs-lisp :tangle packages.el
(package! virtualenvwrapper)
#+end_src

** Web Languages
#+begin_src emacs-lisp :tangle packages.el
(package! lorem-ipsum)
#+end_src




* Applications
** Dired
I like to have a quick menu for accessing commmands in dired.
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :emacs dired +casual)

(package! casual-dired
    :recipe (:host github :repo "kickingvegas/casual-dired")))
#+end_src


** Ebib
I like using ebib as a bibliography manager.
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :tools biblio)
  (package! ebib))
#+end_src

#+begin_src emacs-lisp
(after! citar
  (setq citar-bibliography '("~/Dropbox/biblio/main.bib")
        citar-symbols
        `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))
        citar-symbol-separator "  "
        citar-templates
        '((main . "${=key= id:25}  ${title:48}  ${author editor:30}  ${date year issued:4}")
          (suffix . "          ${=type=:12}    ${tags keywords:*}")
          (preview . " ${=key= id:15} ${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
          (note . "Notes on ${author editor}, ${title}"))))

(defun edit-biblio ()
  "Edit global bibliography"
  (interactive)
  (ebib (car org-cite-global-bibliography)))
#+end_src

** Elfeed
Elfeed has quickly become my favorite RSS reader.
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :app rss)
  (package! elfeed-summary
    :recipe (:host github :repo "SqrtMinusOne/elfeed-summary")))
#+end_src

#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@2-weeks-ago +unread"
        elfeed-db-directory "~/Dropbox/.elfeed")

  (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

  (map! :map elfeed-search-mode-map
        :desc "Mark Entries as read" "a" #'elfeed-mark-all-as-read))

(after! elfeed-org
  (setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed.org")))

(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

* Keybindings
I want to bind my local leader key to =C-SPC=.
#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")

(map! :leader
      (:desc "Find file in project" ":" #'projectile-find-file)
      (:desc "M-x" "SPC" #'execute-extended-command))
#+end_src